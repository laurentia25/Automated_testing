{
	"info": {
		"_postman_id": "3a6f438a-6791-4161-831f-2da9798a5ef0",
		"name": "Testare_Dummy_JSON_Products",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "28412804"
	},
	"item": [
		{
			"name": "Get_all_products",
			"item": [
				{
					"name": "Get_all_products(no params provided)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Testam ca status code-ul este 200\r",
									"// Snippet: Status code: Code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Testam ca status name este cel asteptat\r",
									"// Snippet: Status code: Code name has string\r",
									"pm.test(\"Status code name is OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"// Testam ca lungimea raspunsului este cea asteptata\r",
									"// Response body: JSON value check\r",
									"pm.test(\"Response length check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData[\"products\"].length).eql(30);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://dummyjson.com/products",
							"protocol": "https",
							"host": [
								"dummyjson",
								"com"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a list of products when valid select params provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1: Testam status code-ul response-ului\r",
									"// Snippet: Status code: Code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Test2: Testam performanta request-ului\r",
									"// Snippet: Response time is less than 200ms\r",
									"pm.test(\"Response time is less than 5s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"// Test3: Testam ca fiecare produs are in dictionar doar cheile furnizate in query params\r",
									"// Snippet: Response body: JSON value check\r",
									"pm.test(\"Check dict keys\", function () {\r",
									"    var dicts = pm.response.json()[\"products\"];\r",
									"    var keys = [\"id\", \"title\", \"price\"]\r",
									"    for (const dict of dicts)\r",
									"        pm.expect(Object.keys(dict)).to.eql(keys);\r",
									"});\r",
									"// Test4: Testam ca lungimea listei este identica cu valoarea cheii \"limit\"\r",
									"// Snippet: Response body: JSON value check\r",
									"pm.test(\"Limit check\", function () {\r",
									"    var list = pm.response.json()[\"products\"];\r",
									"    var response = pm.response.json()\r",
									"    pm.expect(list.length).to.eql(response[\"limit\"]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://dummyjson.com/products?select=title,price",
							"protocol": "https",
							"host": [
								"dummyjson",
								"com"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "select",
									"value": "title,price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a list of products when invalid select params provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1: Testam status code-ul response-ului\r",
									"// Snippet: Status code: Code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Test2: Testam performanta request-ului\r",
									"// Snippet: Response time is less than 200ms\r",
									"pm.test(\"Response time is less than 5s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"// Test3: Testam ca din dictionarul fiecarui produs lipseste cheia invalida furnizata in query params\r",
									"// Snippet: Response body: Contains string\r",
									"pm.test(\"Body doesn't contain 'name'\", function () {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"name\");\r",
									"});\r",
									"// Test4: Testam ca lungimea listei este identica cu valoarea cheii \"limit\"\r",
									"// Snippet: Response body: JSON value check\r",
									"pm.test(\"Limit check\", function () {\r",
									"    var list = pm.response.json()[\"products\"];\r",
									"    var response = pm.response.json()\r",
									"    pm.expect(list.length).to.eql(response[\"limit\"]);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://dummyjson.com/products?select=name",
							"protocol": "https",
							"host": [
								"dummyjson",
								"com"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "select",
									"value": "name"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get_a_single_product",
			"item": [
				{
					"name": "Get_a_single_product_by_a_valid_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1: Testam status code-ul raspunsului\r",
									"//Snippet: Status code: Code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Test2: Testam performanta requestului\r",
									"//Snippet: Response time is less than 200ms\r",
									"pm.test(\"Response time is less than 5s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"// Test3: Testam ca valoarea cheii ID este egala cu cea furnizata in link\r",
									"//Snippet: Response body: JSON value check\r",
									"pm.test(\"Value for ID coresponds to q params\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(17);\r",
									"});\r",
									"// Test4: Testam ca raspunsul primit contine cheia \"brand\"\r",
									"//Snippet: Response body: Contains string\r",
									"pm.test(\"Body contains string 'brand'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"brand\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://dummyjson.com/products/17"
					},
					"response": []
				},
				{
					"name": "Get a single product by invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1: Testam status code-ul raspunsului este 404\r",
									"//Snippet: Status code: Code is 200\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"// Test2: Testam performanta requestu-lui\r",
									"// Snippet: response time is less than 200ms\r",
									"pm.test(\"Response time is less than 5s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"// Test3: Testam ca mesajul de eroare este cel asteptat\r",
									"// Snippet: Response body: JSON value check\r",
									"pm.test(\"Check err msg\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Product with id '101' not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://dummyjson.com/products/101"
					},
					"response": []
				}
			]
		},
		{
			"name": "Search_products",
			"item": [
				{
					"name": "Get products that exists in DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1: Testam status code-ul raspunsului primit\r",
									"// Snippet: Status code: Code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Test2: Testam ca cuvantul \"phone\" exista in raspunsul primit\r",
									"// Snippet: Response body: Contains string\r",
									"pm.test(\"Body contains string 'phone'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"phone\");\r",
									"});\r",
									"// Test3: Testam ca lungimea listei este egala cu valoarea cheii \"total\"\r",
									"// Snippet: Response body: JSON value check\r",
									"pm.test(\"Count results\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.products.length).to.eql(jsonData.total);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "brand",
								"value": "Apple",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://dummyjson.com/products/search?q=phone",
							"protocol": "https",
							"host": [
								"dummyjson",
								"com"
							],
							"path": [
								"products",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "phone"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products that not exist in DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test1: Testam status code-ul response-ului\r",
									"//Snippet: Status code: Code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Test2: Testam performanta raspunsului\r",
									"//Snippet: Response time is less than 200ms\r",
									"pm.test(\"Response time is less than 5s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"//Test3: Testam ca lungimea listei este egala cu valoarea cheii \"total\"\r",
									"pm.test(\"Count results\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.products.length).to.eql(jsonData.total);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://dummyjson.com/products/search?q=abcs",
							"protocol": "https",
							"host": [
								"dummyjson",
								"com"
							],
							"path": [
								"products",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "abcs"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Limit&skip_products",
			"item": [
				{
					"name": "Get_list_of_products_when_1>limit<100| skip = 10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test1: Statuse code\r",
									"//Snippet: Status code: Code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//Test2: Performanta requestului\r",
									"//Snippet:Response time is less than 200ms\r",
									"pm.test(\"Response time is less than 5s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"//Test3: Valoarea cheii skip este egala cu 10\r",
									"//Snippet: response body: JSON value check\r",
									"pm.test(\"Skip key value\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.skip).to.eql(10);\r",
									"});\r",
									"//Test4: Lungimea listei \"products\" este egala cu valoare cheii \"limit\"\r",
									"//Snippet: Response body: JSON value check\r",
									"pm.test(\"Length of the response\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.products.length).to.eql(jsonData.limit);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://dummyjson.com/products?limit=35&skip=10",
							"protocol": "https",
							"host": [
								"dummyjson",
								"com"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "35"
								},
								{
									"key": "skip",
									"value": "10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of products when limit>100| skip<0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test1: Testam ca la o limita mai mare decat nr total de produse, sunt returnate toate produsele\r",
									"//Snippet: Response body:JSON value check\r",
									"pm.test(\"Count products\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.limit).to.eql(jsonData.total);\r",
									"});\r",
									"//Test2: Testam ca id-ul primului produs afisat este egal cu 1 (nu a influentat parametrul skip)\r",
									"//Snippet: Response body:JSON value check\r",
									"pm.test(\"First product ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.products[0].id).to.eql(1);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://dummyjson.com/products?limit=101&skip=-3",
							"protocol": "https",
							"host": [
								"dummyjson",
								"com"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "101"
								},
								{
									"key": "skip",
									"value": "-3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get list of products when limit<0 | skip > 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test1: Testam ca primul produs afisat are id-ul egal cu 3\r",
									"//Snippet: Response body: JSON value check\r",
									"pm.test(\"Check first product id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.products[0].id).to.eql(jsonData.skip+1);\r",
									"});\r",
									"//Test2: Testam ca numarul produselor afisate este mai mic decat 100\r",
									"//Snippet: Response body: JSON value check\r",
									"pm.test(\"Count products\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.products.length).to.below(jsonData.total);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://dummyjson.com/products?limit=-7&skip=2",
							"protocol": "https",
							"host": [
								"dummyjson",
								"com"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "-7"
								},
								{
									"key": "skip",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get_all_products_categories",
			"item": [
				{
					"name": "Get all products categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test1: Testam ca exista categoria \"skincare\" in rezultat\r",
									"//Snippet: Response body: Contains string\r",
									"pm.test(\"Check categories\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"skincare\");\r",
									"});\r",
									"//Test2: Testam stasus code\r",
									"//Snippet:Status code: Code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://dummyjson.com/products/categories"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get_products_of_category",
			"item": [
				{
					"name": "Get products by a valid category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1: Testam ca toate produsele afisate au categoria din link\r",
									"//Snippet: Response body: JSON value check\r",
									"pm.test(\"Check category\", function () {\r",
									"    var products = pm.response.json().products;\r",
									"    for (product of products)\r",
									"        pm.expect(product.category).to.eql(\"smartphones\");\r",
									"});\r",
									"// Test2: Testam status code-ul\r",
									"//Snippet:Status code: Code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Test3: Performanta requestului\r",
									"//Snippet: Response time is less than 200ms\r",
									"pm.test(\"Response time is less than 5s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://dummyjson.com/products/category/smartphones"
					},
					"response": []
				},
				{
					"name": "Get products by a invalid category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Test1: Testam ca nu avem produse afisate pentru o categorie invalida\r",
									"//Snippet: Response body: JSON value check\r",
									"pm.test(\"Invalid category\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.products.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": "https://dummyjson.com/products/category/aaaaaaaaaaaa"
					},
					"response": []
				}
			]
		},
		{
			"name": "Add_a_product",
			"item": [
				{
					"name": "Add a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1: Testam ca valoarea cheii \"title\" este egala cu valoarea furnizata\r",
									"// Snippet: Response body: JSON value check\r",
									"pm.test(\"Check value for 'title' key\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql(\"Bijuterii\");\r",
									"});\r",
									"// Test2: Testam ca valoarea cheii \"id\" este mai mare decat numarul total de produse (100)\r",
									"// Snippet: Response body: JSON value check\r",
									"pm.test(\"Check id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.greaterThan(100);\r",
									"});\r",
									"//Test3: Testam status code-ul request-ului\r",
									"// Snippet: Status code: Code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Test4: Testam performanta requestului\r",
									"// Snippet: Response time is less than 200ms\r",
									"pm.test(\"Response time is less than 5s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Bijuterii\",\r\n    \"stock\": 100,\r\n    \"price\": 300\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://dummyjson.com/products/add"
					},
					"response": []
				}
			]
		},
		{
			"name": "Update_a_product",
			"item": [
				{
					"name": "Update a product that exists in DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1: Testam status code-ul requestului\r",
									"// Snippet: Status code: Code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Test2: Testam performanta request-ului\r",
									"// Snippet: Response time is less than 200ms\r",
									"pm.test(\"Response time is less than 5s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"// Test3: Testam ca valoarea cheii \"title\" este egala cu cea furnizata in body\r",
									"// Snippet: Response body: JSON value check\r",
									"pm.test(\"Check value for 'title' key\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.title).to.eql(\"Ochelari\");\r",
									"});\r",
									"// Test4: Testam ca id-ul produsului este egal cu cel din link\r",
									"// Snippet: Response body: JSON value check\r",
									"pm.test(\"Check id\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.eql(33);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Ochelari\",\r\n    \"price\": 200,\r\n    \"rating\": 7\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://dummyjson.com/products/33"
					},
					"response": []
				},
				{
					"name": "Update a product that not exists in DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1: Testam status code-ul raspunsului este 404\r",
									"//Snippet: Status code: Code is 200\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"// Test2: Testam performanta requestu-lui\r",
									"// Snippet: response time is less than 200ms\r",
									"pm.test(\"Response time is less than 5s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"// Test3: Testam ca mesajul de eroare este cel asteptat\r",
									"// Snippet: Response body: JSON value check\r",
									"pm.test(\"Check err msg\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Product with id '105' not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Ochelari\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://dummyjson.com/products/105"
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete_a_product",
			"item": [
				{
					"name": "Delete a product that exists in DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1: Testam status code-ul requestului\r",
									"// Snippet: Status code: Code is 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Test2: Testam performanta request-ului\r",
									"// Snippet: Response time is less than 200ms\r",
									"pm.test(\"Response time is less than 5s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"// Test3: Testam ca valoarea cheii \"isDeleted\" este egala cu true\r",
									"// Snippet: Response body: JSON value check\r",
									"pm.test(\"check isDeleted\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.isDeleted).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "https://dummyjson.com/products/10"
					},
					"response": []
				},
				{
					"name": "Delete a product that not exists in DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test1: Testam status code-ul raspunsului este 404\r",
									"//Snippet: Status code: Code is 200\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"// Test2: Testam performanta requestu-lui\r",
									"// Snippet: response time is less than 200ms\r",
									"pm.test(\"Response time is less than 5s\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"// Test3: Testam ca mesajul de eroare este cel asteptat\r",
									"// Snippet: Response body: JSON value check\r",
									"pm.test(\"Check err msg\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Product with id '107' not found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "https://dummyjson.com/products/107"
					},
					"response": []
				}
			]
		}
	]
}